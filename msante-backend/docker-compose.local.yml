version: '3.8'

services:
  # ============================================================================
  # M-Sant√© Backend Application
  # ============================================================================
  msante-backend:
    build: .
    container_name: msante-backend-local
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/msante_local?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-msante_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-SecurePassword123!}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-RedisSecurePassword789!}
      - JWT_SECRET=${JWT_SECRET:-YourSuperSecureJWTSecretKeyForLocalDevelopment2024!}
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_SN_GOUDIABY_MSANTE=DEBUG
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_CACHE_TYPE=redis
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,env
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
      - ./src:/app/src:ro
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Database Layer
  # ============================================================================
  
  # MySQL Primary Database
  mysql:
    image: mysql:8.0
    container_name: msante-mysql-local
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-RootSecurePassword456!}
      - MYSQL_DATABASE=msante_local
      - MYSQL_USER=${DB_USERNAME:-msante_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-SecurePassword123!}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./db/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-RootSecurePassword456!}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache & Session Storage
  redis:
    image: redis:7-alpine
    container_name: msante-redis-local
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-RedisSecurePassword789!} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-RedisSecurePassword789!}", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # API Gateway & Load Balancer
  # ============================================================================
  
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: msante-nginx-local
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - msante-backend
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy Load Balancer (Alternative to Nginx)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: msante-haproxy-local
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - haproxy_logs:/var/log/haproxy
    depends_on:
      - msante-backend
    networks:
      - msante-local-network
    profiles:
      - load-balancer

  # ============================================================================
  # Monitoring & Observability Stack
  # ============================================================================
  
  # Prometheus Metrics Collector
  prometheus:
    image: prom/prometheus:latest
    container_name: msante-prometheus-local
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: msante-grafana-local
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-GrafanaSecurePassword2024!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/plugins:/var/lib/grafana/plugins:ro
    depends_on:
      - prometheus
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: msante-jaeger-local
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger_data:/tmp
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: msante-elasticsearch-local
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: msante-logstash-local
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: msante-kibana-local
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - msante-local-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Additional Services
  # ============================================================================
  
  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: msante-redis-sentinel-local
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    ports:
      - "26379:26379"
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis
    networks:
      - msante-local-network
    profiles:
      - ha

  # MySQL Replica for Read Scaling
  mysql-replica:
    image: mysql:8.0
    container_name: msante-mysql-replica-local
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-RootSecurePassword456!}
      - MYSQL_REPLICATION_USER=replica_user
      - MYSQL_REPLICATION_PASSWORD=replica_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_replica_data:/var/lib/mysql
      - ./db/replica.cnf:/etc/mysql/conf.d/replica.cnf:ro
    depends_on:
      - mysql
    networks:
      - msante-local-network
    profiles:
      - ha

  # ============================================================================
  # Development Tools
  # ============================================================================
  
  # Adminer Database Management
  adminer:
    image: adminer:latest
    container_name: msante-adminer-local
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
    depends_on:
      - mysql
    networks:
      - msante-local-network
    profiles:
      - dev-tools

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: msante-redis-commander-local
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-RedisSecurePassword789!}
    depends_on:
      - redis
    networks:
      - msante-local-network
    profiles:
      - dev-tools

  # Portainer for Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: msante-portainer-local
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - msante-local-network
    profiles:
      - dev-tools

# ============================================================================
# Volumes
# ============================================================================
volumes:
  mysql_data:
    driver: local
  mysql_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local
  haproxy_logs:
    driver: local
  portainer_data:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  msante-local-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
